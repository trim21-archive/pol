version: 2.1

workflows:
  version: 2

  daily:
    jobs:
      - unittest
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
                - dev
  main:
    jobs:
      - unittest:
          filters:
            tags:
              only: /.*/

      - build-docker:
          requires:
            - unittest
          filters:
            tags:
              only: /.*/

      - docs-deploy:
          requires:
            - unittest
            - build-docker
          filters:
            tags:
              only: /v.*/
            branches:
              ignore: /.*/

aliases:
  python-image: &python-image
    image: circleci/python:3.7.5

  restore_pip_cache: &restore_pip_pre_commit_cache
    restore_cache:
      keys:
        - pip-v3-{{ checksum "poetry.lock" }}-{{ checksum ".pre-commit-config.yaml" }}
        - pip-v3-{{ checksum "poetry.lock" }}-

  install_pip_deps: &install_pip_deps
    run: |
      curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      export PATH=$HOME/.poetry/bin:$PATH
      poetry export --format requirements.txt --dev > requirements.txt
      pip install --user --require-hashes --no-deps --progress-bar off -r requirements.txt

  save_pip_cache: &save_pip_pre_commit_cache
    save_cache:
      key: pip-v3-{{ checksum "poetry.lock" }}-{{ checksum ".pre-commit-config.yaml" }}
      paths:
        - /home/circleci/.cache/pip
        - /home/circleci/.cache/pypoetry
        - /home/circleci/.cache/pre-commit
        - /home/circleci/.local

  upload_codecov_report: &upload_codecov_report
    run:
      when: on_success
      name: Upload Coverage Report
      command: bash <(curl -s https://codecov.io/bash)

  restore_test_data_cache: &restore_test_data_cache
    restore_cache:
      keys:
        - test-data-mysql-v1-{{ checksum ".circleci/test_data_version" }}

  save_test_data_cache: &save_test_data_cache
    save_cache:
      key: test-data-mysql-v1-{{ checksum ".circleci/test_data_version" }}
      paths:
        - /home/circleci/project/tests_data

jobs:
  build-docker:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - checkout

      - run:
          name: Setup Base Env
          command: |
            echo "export BUILD_ARGS=\"--build-arg DAO_COMMIT_SHA=$CIRCLE_SHA1 --build-arg DAO_COMMIT_TAG=$CIRCLE_TAG\"" >> $BASH_ENV

      - run: docker build $BUILD_ARGS -t base -f .docker/Dockerfile .

  unittest:

    docker:
      - *python-image

      - image: redis:2.8.23
        command: redis-server --requirepass "redis_password"

      - image: mysql:5.7.18
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci
        environment:
          MYSQL_USER: root
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: bgm_ip_viewer

      - image: rabbitmq:3
        environment:
          RABBITMQ_DEFAULT_USER: rabbit_user
          RABBITMQ_DEFAULT_PASS: rabbit_pass

    environment:
      MYSQL_HOST: 127.0.0.1
      MYSQL_USER: root
      MYSQL_PASSWORD: root_password
      MYSQL_DB: bgm_ip_viewer

      REDIS_HOST: 127.0.0.1
      REDIS_PASSWORD: redis_password

      RABBITMQ_ADDR: 127.0.0.1:5672
      RABBITMQ_USER: rabbit_user
      RABBITMQ_PASS: rabbit_pass

      VIRTUAL_HOST: 127.0.0.1:8000
      PROTOCOL: http
      BGM_TV_AUTO_TRACKER_APP_SECRET: 3e452da34f146314694a0e1e7f23b722
      BGM_TV_AUTO_TRACKER_APP_ID: bgm2955b3b3050e7bf2
      COMMIT_SHA: 'dev'

      PIPENV_SYSTEM: '1'

    steps:
      - checkout # check out the code in the project directory
      - *restore_pip_pre_commit_cache
      - *install_pip_deps

      - run:
          name: Code Style
          command: pre-commit run --all-files

      - *save_pip_pre_commit_cache
      - *restore_test_data_cache
      - run: sudo apt-get install default-mysql-client -y
      - run:
          name: Wait for MySQL Ready
          command: |
            # wait for mysql start up
            for i in `seq 1 100`;
              do
                nc -z 127.0.0.1 3306 && echo Success && exit 0
                echo -n .
                sleep 0.1
              done
            echo Failed waiting for MySQL && exit 1

      - run:
          name: Setup Test MySQL Database
          command: |
            if [[ ! -f ./tests_data/all.sql ]];then
              mkdir -p ./tests_data
              wget https://github.com/Trim21/personal-website/releases/download/test_data/mysql-1.sql -O ./tests_data/all.sql
            fi

            MYSQL_CLIENT_ARGS="--host $MYSQL_HOST --database=$MYSQL_DB -u root -p$MYSQL_PASSWORD"
            mysql $MYSQL_CLIENT_ARGS -e "SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'NO_AUTO_CREATE_USER',''));"
            mysql $MYSQL_CLIENT_ARGS < ./tests_data/all.sql

      - *save_test_data_cache

      - run:
          name: UnitTest
          command: PYTHONPATH=. coverage run -m pytest --junitxml=$HOME/junit/test_report.xml

      - store_test_results:
          path: ~/junit

      - run:
          name: Build Docs
          command: cd docs && sphinx-build -M html source build

      - persist_to_workspace:
          root: docs/build
          paths: html

      - *upload_codecov_report

  docs-deploy:
    docker:
      - image: node:lts
    steps:
      - checkout
      - attach_workspace:
          at: docs/build
      - run:
          name: Disable jekyll builds
          command: touch docs/build/html/.nojekyll
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "circleci@trim21.me"
            git config user.name "circleci"

      - add_ssh_keys:
          fingerprints:
            - "59:ad:fd:64:71:eb:81:01:6a:d7:1a:c9:0c:19:39:af"

      - run:
          name: Deploy docs to gh-pages branch
          command: |
            gh-pages --dotfiles --message "[skip ci] Updates" --dist docs/build/html \
                --repo https://$DOCKER_PASS@github.com/Trim21/pol.git
